// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, fullName,password
) VALUES (
  $1, $2, $3
)
RETURNING id, email, fullname, password
`

type CreateUserParams struct {
	Email    string
	Fullname pgtype.Text
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Fullname, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserbyEmail = `-- name: GetUserbyEmail :one
SELECT id, email, fullname, password FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserbyEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserbyEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
	)
	return i, err
}

const getUserbyID = `-- name: GetUserbyID :one
SELECT id, email, fullname, password FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserbyID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserbyID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Fullname,
		&i.Password,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, fullname, password FROM users
ORDER BY id
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Fullname,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set fullName = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64
	Fullname pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Fullname)
	return err
}
